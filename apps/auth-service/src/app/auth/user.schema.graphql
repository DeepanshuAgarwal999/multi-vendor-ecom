type User {
  id: ID!
  name: String!
  email: String!
  password: String
  following: [String!]!
  avatar: Image
  createdAt: String
  updatedAt: String
}

type Image {
  id: ID!
  file_id: String!
  url: String!
  userId: ID
  user: User!
}

type AuthResponse {
  message: String!
}

type Query {
  users: [User]
  user(id: ID!): User
  getLoggedInUser: UserInfo!
  refreshTokenUser: AuthResponse!
}
type LoginUserData {
  id: ID!
  name: String!
  email: String!
}
type LoginUserResponse {
  user: LoginUserData!
  message: String!
}
type UserInfo {
  id: ID!
  role: String!
}
enum UserType {
  user
  seller
}
type Mutation {
  userRegistration(name: String!, email: String!): AuthResponse!
  loginUser(email: String!, password: String!): LoginUserResponse!
  verifyRegistrationOtp(email: String!, otp: String!, password: String!, name: String!): AuthResponse!
  ForgotPassword(email: String!, userType: UserType!): AuthResponse!
  verifyForgotPasswordOtp(email: String!, otp: String!): AuthResponse!
  userResetPassword(email: String!, newPassword: String!): AuthResponse!
  updateUser(id: ID!, name: String!, email: String!): User!
  deleteUser(id: ID!): User
  registerSeller(name: String!, email: String!): AuthResponse!
}
